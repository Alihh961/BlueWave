<?php

namespace App\Controller\Admin;

use App\Entity\User;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\CollectionField;
use EasyCorp\Bundle\EasyAdminBundle\Field\EmailField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use mysql_xdevapi\Exception;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\Regex;

class UserCrudController extends AbstractCrudController
{

    public function __construct(
        private UserPasswordHasherInterface $userPasswordHasher,
        private UserRepository              $userRepository
    )
    {
    }


    // this function is executed when we edit a user
    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {

        try {


            flash()->addFlash('success', 'Account updated with success', 'Account Updated');
            $isAdmin = $entityInstance->isIsAdmin();
            $roles = $entityInstance->getRoles();
            if ($isAdmin) {
                if (!in_array('ROLE_ADMIN', $roles)) {

                    $roles [] = 'ROLE_ADMIN';

                }
            } else {
                $roles = array_diff($roles, ['ROLE_ADMIN']);
            }

            $entityInstance->setRoles($roles);
            parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
        } catch (\Exception $e) {
            throw new Exception($e);
        }


    }

    public static function getEntityFqcn(): string
    {
        return User::class;
    }


    // this function is executed when we create a user
    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {

        try {

            $entityInstance->setCurrentBalance(0);

            $password = $entityInstance->getPassword();
            $hashedPassword = $this->userPasswordHasher->hashPassword($entityInstance, $password);
            $entityInstance->setPassword($hashedPassword);

            $isAdmin = $entityInstance->isIsAdmin();
            $roles = $entityInstance->getRoles();
            if ($isAdmin) {
                if (!in_array('ROLE_ADMIN', $roles)) {

                    $roles [] = 'ROLE_ADMIN';

                }
            } else {
                $roles = array_diff($roles, ['ROLE_ADMIN']);
            }

            $entityInstance->setRoles($roles);

            flash()->addFlash('success', 'Account created with success', 'Account Created');


            parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
        } catch (\Exception $e) {
            throw new \Exception($e);
        }


    }


    public function configureFields(string $pageName): iterable
    {

        return [
            EmailField::new('email', "E-mail")
                ->setFormTypeOptions([
                    "constraints" => [
                        new NotBlank([
                            "message" => "Email required"
                        ]),

                        new Regex([
                            "pattern" => '/^[^@\t\r\n]+@[^@\t\r\n]+\.[^@\t\r\n]+$/',
                            "message" => 'Invalid email format'
                        ])],
                ]),
            TextField::new("password")
                ->hideWhenUpdating()
                ->hideOnIndex()
                ->setRequired(1)
                ->setFormType(RepeatedType::class)
                ->setFormTypeOptions([
                    'type' => PasswordType::class,
                    'first_options' => [
                        'label' => "Password",
                        'attr' => [
                            'style' => 'max-width:491.93px'
                        ]
                    ],
                    'second_options' => [
                        'label' => "Retype Password",
                        'attr' => [
                            'style' => 'max-width:491.93px'
                        ]

                    ],
                    "constraints" => [
                        new NotBlank([
                            "message" => "Password can't be empty"
                        ]), new Regex([
                            "pattern" => "/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$/",
                            "message" => "At least 8 characters , one capital letter , one small letter, one number and a special character"

                        ])
                    ]
                ]),
            TextField::new('firstName')
                ->setFormTypeOptions([
                    "constraints" => [
                        new Regex ([
                            'pattern' => '/^[a-zA-Z]+$/',
                            "message" => "Only letters and no white spaces"
                        ]),
                        new NotBlank([
                            "message" => "First Name can't be empty"
                        ])
                    ]
                ]),
            TextField::new('lastName')
                ->setFormTypeOptions([
                    "constraints" => [
                        new Regex ([
                            'pattern' => '/^[a-zA-Z]+$/',
                            "message" => "Only letters and no white spaces"
                        ]),
                        new NotBlank([
                            "message" => "Last Name can't be empty"
                        ])
                    ]
                ]),
            TextField::new('phoneNumber')
                ->setFormTypeOptions([
                    "constraints" => [
                        new Regex([
                            'pattern' => '/^0\d*$/',
                            'message' => 'Only numbers are allowed'
                        ]),
                        new NotBlank([
                            "message" => "Phone Number can't be empty"
                        ])
                    ]
                ]),
            BooleanField::new('isVerified'),
            BooleanField::new('isAdmin'),


        ];
    }

}
